package io.github.soulcodingmatt.equilibrium.processor.generator;

import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.AccessorConfig;
import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.ConstructorConfig;
import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.FieldInclusionConfig;
import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.GeneratorType;

import javax.annotation.processing.Filer;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class VoGenerator {
    private final TypeElement classElement;
    private final String packageName;
    private final String voClassName;
    private final Set<String> ignoredFields;
    private final boolean generateSetters;
    private final Filer filer;
    private final int voId;

    public VoGenerator(TypeElement classElement, String packageName, String voClassName,
                       Set<String> ignoredFields, boolean generateSetters, int voId, Filer filer) {
        this.classElement = classElement;
        this.packageName = packageName;
        this.voClassName = voClassName;
        this.ignoredFields = ignoredFields != null ? ignoredFields : new HashSet<>();
        this.generateSetters = generateSetters;
        this.filer = filer;
        this.voId = voId;
    }

    public void generate() throws IOException {
        // Create field inclusion configuration
        FieldInclusionConfig fieldConfig = new FieldInclusionConfig(GeneratorType.VO, ignoredFields, voId);
        
        // Get all fields that should be included in the Value Object
        List<VariableElement> fields = GeneratorUtility.getIncludedFields(classElement, fieldConfig);
        
        // Create or update the Value Object file
        JavaFileObject sourceFile = filer.createSourceFile(packageName + "." + voClassName, classElement);
        
        try (Writer writer = sourceFile.openWriter()) {
            // Write package declaration
            writer.write("package " + packageName + ";\n\n");
            
            // Write imports
            GeneratorUtility.writeBasicImports(writer, fields);
            
            // Write class declaration
            writer.write("/**\n");
            writer.write(" * Value Object for {@link " + classElement.getQualifiedName() + "}\n");
            writer.write(" * Generated by Project Equilibrium\n");
            writer.write(" */\n");
            writer.write("public class " + voClassName + " {\n\n");
            
            // Create constructor configuration
            ConstructorConfig constructorConfig = new ConstructorConfig(!generateSetters, null);
            
            // Write fields
            for (VariableElement field : fields) {
                GeneratorUtility.writeField(writer, field, constructorConfig);
            }
            
            // Write constructor
            GeneratorUtility.writeConstructor(writer, fields, voClassName, constructorConfig);
            
            // Create accessor configuration
            AccessorConfig accessorConfig = new AccessorConfig(generateSetters, null);
            
            // Write getters and optionally setters
            for (VariableElement field : fields) {
                GeneratorUtility.writeAccessors(writer, field, accessorConfig);
            }
            
            // Write standard method overrides (always generated)
            GeneratorUtility.writeEquals(writer, fields, voClassName);
            GeneratorUtility.writeHashCode(writer, fields);
            GeneratorUtility.writeToString(writer, fields, voClassName);
            
            // Close class
            writer.write("}\n");
        }
    }
}
