package io.github.soulcodingmatt.equilibrium.processor.generator;

import io.github.soulcodingmatt.equilibrium.annotations.common.IgnoreAll;
import io.github.soulcodingmatt.equilibrium.annotations.vo.IgnoreVo;

import javax.annotation.processing.Filer;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeKind;
import javax.lang.model.type.TypeMirror;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class VoGenerator {
    public static final String STRING_END = "    }\n\n";
    public static final String OVERRIDE = "    @Override\n";
    private final TypeElement classElement;
    private final String packageName;
    private final String voClassName;
    private final Set<String> ignoredFields;
    private final boolean generateSetters;
    private final Filer filer;
    private final int voId;

    public VoGenerator(TypeElement classElement, String packageName, String voClassName,
                       Set<String> ignoredFields, boolean generateSetters, int voId, Filer filer) {
        this.classElement = classElement;
        this.packageName = packageName;
        this.voClassName = voClassName;
        this.ignoredFields = ignoredFields != null ? ignoredFields : new HashSet<>();
        this.generateSetters = generateSetters;
        this.filer = filer;
        this.voId = voId;
    }

    public void generate() throws IOException {

        // Get all fields that should be included in the Value Object
        List<VariableElement> fields = getIncludedFields();
        
        // Create or update the Value Object file
        JavaFileObject sourceFile = filer.createSourceFile(packageName + "." + voClassName, classElement);
        
        try (Writer writer = sourceFile.openWriter()) {
            // Write package declaration
            writer.write("package " + packageName + ";\n\n");
            
            // Write imports
            writeImports(writer, fields);
            
            // Write class declaration
            writer.write("/**\n");
            writer.write(" * Value Object for {@link " + classElement.getQualifiedName() + "}\n");
            writer.write(" * Generated by Project Equilibrium\n");
            writer.write(" */\n");
            writer.write("public class " + voClassName + " {\n\n");
            
            // Write fields
            for (VariableElement field : fields) {
                writeField(writer, field);
            }
            
            // Write constructor
            writeConstructor(writer, fields, voClassName);
            
            // Write getters and optionally setters
            for (VariableElement field : fields) {
                writeAccessors(writer, field);
            }
            
            // Write standard method overrides (always generated)
            writeEquals(writer, fields, voClassName);
            writeHashCode(writer, fields);
            writeToString(writer, fields);
            
            // Close class
            writer.write("}\n");
        }
    }

    private List<VariableElement> getIncludedFields() {
        return collectFieldsFromHierarchy(classElement);
    }

    private List<VariableElement> collectFieldsFromHierarchy(TypeElement element) {
        List<VariableElement> fields = element.getEnclosedElements().stream()
            .filter(e -> e.getKind() == ElementKind.FIELD)
            .map(VariableElement.class::cast)
            .filter(this::shouldIncludeField)
            .toList();

        // Get parent class fields
        TypeMirror superclass = element.getSuperclass();
        if (superclass.getKind() != TypeKind.NONE && !superclass.toString().equals("java.lang.Object")) {
            TypeElement superclassElement = (TypeElement) ((DeclaredType) superclass).asElement();
            fields = Stream.concat(
                fields.stream(),
                collectFieldsFromHierarchy(superclassElement).stream()
            ).toList();
        }

        return fields;
    }

    private boolean shouldIncludeField(VariableElement field) {
        // Exclude fields marked with @IgnoreAll
        if (field.getAnnotation(IgnoreAll.class) != null) {
            return false;
        }
        
        // Handle ID-based @IgnoreVo exclusion
        IgnoreVo ignoreVoAnnotation = field.getAnnotation(IgnoreVo.class);
        if (ignoreVoAnnotation != null) {
            int[] ignoredIds = ignoreVoAnnotation.ids();
            
            // If no IDs specified, ignore for all VOs
            if (ignoredIds.length == 0) {
                return false;
            }
            
            // If IDs specified, only ignore if current VO ID is in the list
            for (int ignoredId : ignoredIds) {
                if (ignoredId == voId) {
                    return false;
                }
            }
        }
        
        // Exclude any fields specified in the ignore collection
        String fieldName = field.getSimpleName().toString();
        if (ignoredFields.contains(fieldName)) {
            return false;
        }
        
        // Exclude static and transient fields
        Set<Modifier> modifiers = field.getModifiers();
        return !modifiers.contains(Modifier.STATIC) && 
               !modifiers.contains(Modifier.TRANSIENT);
    }

    private void writeImports(Writer writer, List<VariableElement> fields) throws IOException {
        writer.write("import java.util.Objects;\n");
        
        Set<String> imports = fields.stream()
            .map(field -> field.asType().toString())
            .map(this::extractBaseType)
            .filter(type -> type.contains("."))
            .collect(Collectors.toSet());
        
        for (String importType : imports) {
            writer.write("import " + importType + ";\n");
        }
        writer.write("\n");
    }

    private String extractBaseType(String fullType) {
        // Remove generic type parameters for import statements
        int genericStart = fullType.indexOf('<');
        if (genericStart > 0) {
            return fullType.substring(0, genericStart);
        }
        return fullType;
    }

    private void writeField(Writer writer, VariableElement field) throws IOException {
        // Write field with its type and name - fields are final only if setters are disabled
        String type = field.asType().toString();
        String name = field.getSimpleName().toString();
        writer.write("    private " + (generateSetters ? "" : "final ") + type + " " + name + ";\n\n");
    }

    private void writeConstructor(Writer writer, List<VariableElement> fields, String className) throws IOException {
        writer.write("    public " + className + "(");
        
        // Write constructor parameters
        boolean first = true;
        for (VariableElement field : fields) {
            if (!first) {
                writer.write(", ");
            }
            String type = field.asType().toString();
            String name = field.getSimpleName().toString();
            writer.write(type + " " + name);
            first = false;
        }
        writer.write(") {\n");
        
        // Write field assignments
        for (VariableElement field : fields) {
            String name = field.getSimpleName().toString();
            writer.write("        this." + name + " = " + name + ";\n");
        }
        writer.write(STRING_END);
    }

    private void writeAccessors(Writer writer, VariableElement field) throws IOException {
        String type = field.asType().toString();
        String name = field.getSimpleName().toString();
        String capitalizedName = name.substring(0, 1).toUpperCase() + name.substring(1);
        
        // Getter
        writer.write("    public " + type + " get" + capitalizedName + "() {\n");
        writer.write("        return " + name + ";\n");
        writer.write(STRING_END);
        
        // Setter (only if enabled)
        if (generateSetters) {
            writer.write("    public void set" + capitalizedName + "(" + type + " " + name + ") {\n");
            writer.write("        this." + name + " = " + name + ";\n");
            writer.write(STRING_END);
        }
    }

    private void writeEquals(Writer writer, List<VariableElement> fields, String className) throws IOException {
        writer.write(OVERRIDE);
        writer.write("    public boolean equals(Object o) {\n");
        writer.write("        if (this == o) return true;\n");
        writer.write("        if (o == null || getClass() != o.getClass()) return false;\n");
        writer.write("        " + className + " that = (" + className + ") o;\n");
        
        // Compare each field
        for (VariableElement field : fields) {
            String name = field.getSimpleName().toString();
            writer.write("        if (!Objects.equals(" + name + ", that." + name + ")) return false;\n");
        }
        
        writer.write("        return true;\n");
        writer.write(STRING_END);
    }

    private void writeHashCode(Writer writer, List<VariableElement> fields) throws IOException {
        writer.write(OVERRIDE);
        writer.write("    public int hashCode() {\n");
        writer.write("        return Objects.hash(");
        
        // Add all fields to hash
        boolean first = true;
        for (VariableElement field : fields) {
            if (!first) {
                writer.write(", ");
            }
            writer.write(field.getSimpleName().toString());
            first = false;
        }
        
        writer.write(");\n");
        writer.write(STRING_END);
    }

    private void writeToString(Writer writer, List<VariableElement> fields) throws IOException {
        writer.write(OVERRIDE);
        writer.write("    public String toString() {\n");
        writer.write("        return \"" + voClassName + "{\" +\n");
        
        // Add all fields to string representation
        boolean first = true;
        for (VariableElement field : fields) {
            String name = field.getSimpleName().toString();
            if (first) {
                writer.write("            \"" + name + "=\" + " + name);
                first = false;
            } else {
                writer.write(" +\n            \", " + name + "=\" + " + name);
            }
        }
        
        writer.write(" +\n            \"}\";\n");
        writer.write(STRING_END);
    }
}
