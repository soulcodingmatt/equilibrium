package io.github.soulcodingmatt.equilibrium.processor.generator;

import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.FieldInclusionConfig;
import io.github.soulcodingmatt.equilibrium.processor.generator.GeneratorUtility.GeneratorType;

import javax.annotation.processing.Filer;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class RecordGenerator {
    private final TypeElement classElement;
    private final String packageName;
    private final String recordClassName;
    private final Set<String> ignoredFields;
    private final Filer filer;
    private final int recordId;

    public RecordGenerator(TypeElement classElement, String packageName, String recordClassName,
                           Set<String> ignoredFields, int recordId, Filer filer) {
        this.classElement = classElement;
        this.packageName = packageName;
        this.recordClassName = recordClassName;
        this.ignoredFields = ignoredFields != null ? ignoredFields : new HashSet<>();
        this.filer = filer;
        this.recordId = recordId;
    }

    public void generate() throws IOException {
        // Create field inclusion configuration
        FieldInclusionConfig fieldConfig = new FieldInclusionConfig(GeneratorType.RECORD, ignoredFields, recordId);
        
        // Get all fields that should be included in the Record
        List<VariableElement> fields = GeneratorUtility.getIncludedFields(classElement, fieldConfig);
        
        // Create or update the Record file
        JavaFileObject sourceFile = filer.createSourceFile(packageName + "." + recordClassName, classElement);
        
        try (Writer writer = sourceFile.openWriter()) {
            // Write package declaration
            writer.write("package " + packageName + ";\n\n");
            
            // Write imports (records typically don't need Objects import for equals/hashCode/toString)
            writeImports(writer, fields);
            
            // Write record declaration
            writer.write("/**\n");
            writer.write(" * Record for {@link " + classElement.getQualifiedName() + "}\n");
            writer.write(" * Generated by Project Equilibrium\n");
            writer.write(" */\n");
            
            // Write record with its parameters
            writer.write("public record " + recordClassName + "(");
            GeneratorUtility.writeRecordParameters(writer, fields, null);
            writer.write(") {}\n");
        }
    }

    private void writeImports(Writer writer, List<VariableElement> fields) throws IOException {
        Set<String> imports = fields.stream()
            .map(field -> field.asType().toString())
            .map(GeneratorUtility::extractBaseType)
            .filter(type -> type.contains("."))
            .collect(java.util.stream.Collectors.toSet());
        
        for (String importType : imports) {
            writer.write("import " + importType + ";\n");
        }
        writer.write("\n");
    }
}
